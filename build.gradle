plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.valanse'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot 설정
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Swagger 설정
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // Jackson 설정
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    // QueryDSL 설정
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api:2.1.1'

    // Lombok 설정
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // JWT 설정
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly('io.jsonwebtoken:jjwt-jackson:0.11.5')

    // MySQL 설정
    implementation 'com.mysql:mysql-connector-j:8.0.33'

    // Spring Test 설정
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // jdbc
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
}

// QueryDSL 설정 시작
// QueryDSL Q-Type이 생성될 디렉토리 정의
// Gradle의 표준 어노테이션 프로세서 생성 소스 디렉토리 경로를 따릅니다.
def generatedQuerydslDir = layout.buildDirectory.dir("generated/sources/annotationProcessor/java/main").get().asFile

// 모든 Java 컴파일 태스크에 대해 어노테이션 프로세서의 출력 디렉토리를 명시적으로 설정
tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = generatedQuerydslDir
}

// 생성된 QueryDSL 디렉토리를 main 소스 세트에 추가하여 컴파일 과정에 포함시킵니다.
// 이렇게 하면 빌드 시스템이 이 파일들을 '생성된' 소스로 인식합니다.
sourceSets {
    main.java.srcDirs += generatedQuerydslDir
}

// 'clean' 태스크 실행 시 생성된 QueryDSL 디렉토리가 함께 삭제되도록 설정
// 이는 빌드 시 잠재적인 충돌을 방지하는 데 중요합니다.
clean {
    delete generatedQuerydslDir
}
// QueryDSL 설정 끝
